{
    "components": {
        "identity_pool": {
            "type": "ext",
            "displayname": "CK Cognito Identity Pool",
            "description": "Deploys an AWS Cognito Identity Pool. API Gateway sits on the front of your API and handles accepting and processing API calls",
            "cloud": "AWS",
            "resources": ["AWS::apigateway::api", "AWS::logs::loggroup"],
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "lambda:AddPermission",
                        "lambda:GetFunction",
                        "lambda:InvokeFunction",
                        "logs:*",
                        "apigateway:PUT",
                        "apigateway:POST",
                        "apigateway:PATCH",
                        "apigateway:DELETE",
                        "apigateway:GET"
                    ],
                    "Resource": "*"
                }]
            },
            "input": {
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "object",
                        "description": "Each key at the base level of this object must specify a route (e.g. /soar). Then, each value should be an object with additional route keys and/or HTTP methods as keys (e.g. PATCH). The route keys should have as their value either an HTTP endpoint, a lambda component reference, a lambda ARN, or a list with the first element being one of the three previously mentioned strings and the second element being the name of an authorizer. http://NOTHEREYET for examples."
                    },
                    "cors_configuration": {
                        "type": "object",
                        "description": "If you want to specify a custom CORS configuration to attach to this API, pass this parameter",
                        "properties": {
                            "allowOrigins": {
                                "type": "array",
                                "description": "Set to \"*\" to allow all origins. Otherwise set to a list of origins"
                            },
                            "allowMethods": {
                                "type": "array",
                                "description": "Set to \"*\" to allow all methods. Otherwise set to a list of methods"
                            },
                            "allowHeaders": {
                                "type": "array",
                                "description": "Set to a list of headers for Access-control-allow-headers in CORS"
                            },
                            "exposeHeaders": {
                                "type": "array",
                                "description": "Set to a list of headers for Access-control-expose-headers in CORS"
                            },
                            "maxAge": {
                                "type": "number"
                            }
                        },
                        "required": [
                            "allowOrigins",
                            "allowMethods",
                            "allowHeaders",
                            "exposeHeaders"
                        ]
                    },
                    "authorizers": {
                        "type": "object",
                        "description": "A dictionary of the JWT and Lambda authorizers that should be attached to this API",
                        "properties": {
                            "audience": {
                                "type": "string",
                                "description": "The audience that the JWT authorizer should validate against"
                            },
                            "audiences": {
                                "type": "array",
                                "description": "A list of audiences the JWT authorizer should validate against"
                            },
                            "issuer": {
                                "type": "string",
                                "description": "The issuer of the token."
                            },
                            "connect_url": {
                                "type": "string",
                                "description": "Cognito endpoint to get issuer from. Only set for Cognito JWT issuers"
                            },
                            "source": {
                                "type": "string",
                                "description": "The header to get the JWT from. Only set if you want a header other than Authorization"
                            },
                            "lambda_arn": {
                                "type": "string",
                                "description": "The ARN for the desired authorizer Lambda"
                            },
                            "payload_version": {
                                "type": "string",
                                "enum": ["1.0", "2.0"],
                                "default": "2.0",
                                "description": "The event format passed to Lambdas by API Gateway. We recommend 2.0. See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html for a comparison of the two and more details"
                            },
                            "enable_simple_responses": {
                                "type": "boolean",
                                "description": "Whether to allow the authorizer to return a boolean value only",
                                "default": true
                            },
                            "cache_seconds": {
                                "type": "integer",
                                "description": "How long to cache this Authorizer result",
                                "default": 300
                            }
                        },
                        "anyOf": [
                            {
                                "required": [
                                    "lambda_arn"
                                ]
                            },
                            {
                                "required": [
                                    "audience",
                                    "issuer"
                                ]
                            },
                            {
                                "required": [
                                    "audiences",
                                    "issuer"
                                ]
                            },
                            {
                                "required": [
                                    "audience",
                                    "connect_url"
                                ]
                            },
                            {
                                "required": [
                                    "audiences",
                                    "connect_url"
                                ]
                            }
                        ]
                    },
                    "stage_variables": {
                        "type": "object",
                        "description": "key-value pairs of variables that should get attached to the stage"
                    },
                    "lambda_payload_version": {
                        "type": "string",
                        "enum": ["1.0", "2.0"],
                        "default": "2.0",
                        "description": "The event format passed to Lambdas by API Gateway. We recommend 2.0. See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html for a comparison of the two and more details"
                    },
                    "throttling_burst_limit": {
                        "type": "integer",
                        "description": "The default burst limit for all routes"
                    },
                    "throttling_rate_limit": {
                        "type": "number",
                        "description": "The default rate limit for all routes"
                    },
                    "cors_enabled": {
                        "type": "boolean",
                        "description": "If true (and cors_configuration not specified), sets the cors configuration to a set of default values intended to service basic APIs being hit by the browser. See http://NotHereYet for details"
                    },
                    "tags": {
                        "type": "object",
                        "description": "A set of key-value pairs to attach to this API Gateway as tags"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the API Gateway. Will be auto-generated if not specified"
                    },
                    "stage_name": {
                        "type": "string",
                        "description": "The name of the stage, this is added to the URL of the API for all endpoints",
                        "default": "live"
                    },
                    "domain_names": {
                        "type": "array",
                        "description": "A list of domain names to point at this API"
                    },
                    "domain_name": {
                        "type": "string",
                        "description": "The (singular) domain name to point at this API"
                    },
                    "base_domain": {
                        "type": "string",
                        "description": "Pass a base domain to get a unique domain through a generated subdomain"
                    }
                },
                "required": [
                    "resources"
                ] 
            },
            "props": {
                "log_group_arn": {
                    "type": "string",
                    "description": "The ARN of the log group associated with this API"
                },
                "log_group_name": {
                    "type": "string",
                    "description": "The name of the log group associated with this API"
                },
                "api_id": {
                    "type": "string",
                    "description": "The ID of this API. Appears in the default HTTP endpoint"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN for this API"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this API, as it appears in the console"
                },
                "api_endpoint": {
                    "type": "string",
                    "description": "The default HTTPS endpoint of this API"
                },
                "stage_name": {
                    "type": "string",
                    "description": "The name of the deployed stage"
                },
                "Route53 (num)": {
                    "type": "object",
                    "description": "Contains the properties of any route53.record components deployed, with num corresponding to the order within the list of domain_names, counting up from 1"
                },
                "Domain (num)": {
                    "type": "object",
                    "description": "Contains the properties of any domain_name components deployed, with num corresponding to the order within the list of domain_names, counting up from 1"
                }
            }
        },
        "user_pool": {
            "type": "ext",
            "displayname": "CK Cognito User Pool",
            "description": "Deploys an Cognito User Pool. User Pools are used to authenticate users and manage user data.",
            "cloud": "AWS",
            "resources": ["AWS::cognito::userpool"],
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "cognito-idp:CreateUserPool",
                        "cognito-idp:DeleteUserPool",
                        "cognito-idp:DescribeUserPool",
                        "cognito-idp:UpdateUserPool"
                    ],
                    "Resource": "*"
                }]
            },
            "props": {
                "name": {
                    "type": "string",
                    "description": "The name of the user pool, possibly auto-generated"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the user pool, which is part of the URL. Pattern '{region}_xxxxxxxxx'"
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the user pool"
                }
            },
            "input": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The desired user pool name. Will be auto-generated if not provided"
                    },
                    "password_policy": {
                        "type": "object",
                        "description": "The password policy for the user pool",
                        "properties": {
                            "MinimumLength": {
                                "type": "integer",
                                "description": "The minimum length of the password",
                                "default": 8
                            },
                            "RequireLowercase": {
                                "type": "boolean",
                                "description": "If true, the password must contain at least one lowercase letter",
                                "default": true
                            },
                            "RequireUppercase": {
                                "type": "boolean",
                                "description": "If true, the password must contain at least one uppercase letter",
                                "default": true
                            },
                            "RequireNumbers": {
                                "type": "boolean",
                                "description": "If true, the password must contain at least one number",
                                "default": true
                            },
                            "RequireSymbols": {
                                "type": "boolean",
                                "description": "If true, the password must contain at least one symbol",
                                "default": true
                            }
                        }
                    },
                    "pre_sign_up_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called before a user is created"
                    },
                    "custom_message_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a custom message is sent to a user"
                    },
                    "post_confirmation_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called after a user is confirmed"
                    },
                    "pre_authentication_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called before a user is authenticated"
                    },
                    "post_authentication_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called after a user is authenticated"
                    },
                    "deferred_authentication_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called after a user is authenticated"
                    },
                    "create_auth_challenge_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is challenged"
                    },
                    "define_auth_challenge_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is challenged"
                    },
                    "verify_auth_challenge_response_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is challenged"
                    },
                    "pre_token_generation_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called before a user is authenticated"
                    },
                    "user_migration_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is authenticated"
                    },
                    "custom_sms_sender_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is challenged"
                    },
                    "custom_email_sender_lambda_arn": {
                        "type": "string",
                        "description": "The ARN of the Lambda function to be called when a user is challenged"
                    },
                    "auto_verified_attributes": {
                        "type": "array",
                        "description": "The attributes that are automatically verified when the user signs up",
                        "default": ["email"]
                    },
                    "alias_attributes": {
                        "type": "array",
                        "description": "The attributes that are automatically verified when the user signs up",
                        "default": ["preferred_username", "phone_number", "email"]
                    },
                    "username_attributes": {
                        "type": ["array", "null"],
                        "description": "The attributes that are automatically verified when the user signs up",
                        "default": null
                    },
                    "sms_verification_message": {
                        "type": "string",
                        "description": "The message that is sent to the user when they are sent a verification code",
                        "default": "Your verification code is {####}"
                    },
                    "email_verification_message": {
                        "type": "string",
                        "description": "The message that is sent to the user when they are sent a verification code",
                        "default": "Your verification code is {####}"
                    },
                    "email_verification_subject": {
                        "type": "string",
                        "description": "The subject of the email that is sent to the user when they are sent a verification code",
                        "default": "Your Verification Code"
                    },
                    "sms_authentication_message": {
                        "type": "string",
                        "description": "The message that is sent to the user when they are sent a verification code",
                        "default": "Your authentication code is {####}. "
                    },
                    "mfa": {
                        "type": "string",
                        "description": "When to enable MFA",
                        "enum": ["OFF", "OPTIONAL", "REQUIRED"]
                    },
                    "user_attribute_update_settings": {
                        "type": "object",
                        "description": "A description of what properties need to be verified before the user was updated",
                        "properties": {
                            "AttributesRequireVerificationBeforeUpdate": {
                                "type": "array"
                            }
                        }
                    },
                    "remember_device": {
                        "type": "string",
                        "description": "When to enable remember device",
                        "enum": ["ALWAYS", "USER_OPT_IN", "NEVER"],
                        "default": "ALWAYS"
                    },
                    "ses_email_address_arn": {
                        "type": "string",
                        "description": "The ARN of the SES email address"
                    },
                    "reply_to_email_address": {
                        "type": "string",
                        "description": "The reply to email address"
                    },
                    "sms_role_arn": {
                        "type": "string",
                        "description": "The ARN of the SMS role"
                    },
                    "sms_external_id": {
                        "type": "string",
                        "description": "The external ID of the SMS role"
                    },
                    "sms_region": {
                        "type": "string",
                        "description": "The region of the SMS role"
                    },
                    "allow_admin_create_user_only": {
                        "type": "boolean",
                        "description": "If true, only the administrator can create a user",
                        "default": false
                    },
                    "unused_invite_validity_days": {
                        "type": "integer",
                        "description": "The number of days that an unused invite is valid",
                        "default": 7
                    },
                    "invite_sms_message": {
                        "type": "string",
                        "description": "The message that is sent to the user when they are sent an invite",
                        "default": "Your username is {username} and temporary password is {####}. "
                    },
                    "invite_email_message": {
                        "type": "string",
                        "description": "The message that is sent to the user when they are sent an invite",
                        "default": "Your username is {username} and temporary password is {####}. "
                    },
                    "invite_email_subject": {
                        "type": "string",
                        "description": "The subject of the email that is sent to the user when they are sent an invite",
                        "default": "Your temporary password"
                    },
                    "advanced_security_mode": {
                        "type": "string",
                        "description": "The advanced security mode",
                        "enum": ["OFF", "AUDIT", "ENFORCED"],
                        "default": "OFF"
                    },
                    "sign_up_required_attributes": {
                        "type": "array",
                        "description": "The attributes that are required when a user signs up",
                        "default": []
                    },
                    "custom_attributes": {
                        "type": "array",
                        "description": "The attributes that are required when a user signs up"
                    },
                    "username_case_sensitive": {
                        "type": "boolean",
                        "description": "If true, the username is case sensitive",
                        "default": false
                    },
                    "prefer_phone_number_recovery": {
                        "type": "boolean",
                        "description": "If true, the user can use their phone number to recover their account",
                        "default": false
                    },
                    "tags": {
                        "type": "object",
                        "description": "A set of key-value pairs to attach to this API Gateway custom domain name as tags"
                    }
                }
            }
        },
        "user_pool_client": {
            "type": "ext",
            "displayname": "CK Cognito User Pool Client",
            "description": "Deploys an Cognito User Pool Client. User Pool Clients are app clients that get credentials to use a user pool.",
            "cloud": "AWS",
            "resources": ["AWS::cognito::userpoolclient"],
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "cognito-idp:DescribeUserPool",
                        "cognito-idp:CreateUserPoolClient",
                        "cognito-idp:DeleteUserPoolClient",
                        "cognito-idp:DescribeUserPoolClient",
                        "cognito-idp:UpdateUserPoolClient"
                    ],
                    "Resource": "*"
                }]
            },
            "props": {
                "name": {
                    "type": "string",
                    "description": "The name of the client, possibly auto-generated"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the client"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret associated with the client, to be used in combination with the client ID"
                },
                "user_pool_id": {
                    "type": "string",
                    "description": "The ID of the user pool to which the client belongs"
                }
            },
            "input": {
                "type": "object",
                "properties": {
                    "user_pool_id": {
                        "type": "string",
                        "description": "The ID of the user pool this client should be associated with",
                        "requried": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The desired user pool client name. Will be auto-generated if not provided"
                    },
                    "generate_secret": {
                        "type": "boolean",
                        "description": "If true, a secret will be generated for the client",
                        "default": true
                    },
                    "access_token_expiration_minutes": {
                        "type": "string",
                        "description": "The number of minutes the access token is valid after being issued",
                        "default": 60
                    },
                    "id_token_expiration_minutes": {
                        "type": "string",
                        "description": "The number of minutes the ID token is valid after being issued",
                        "default": 60
                    },
                    "refresh_token_expiration_minutes": {
                        "type": "string",
                        "description": "The number of minutes the refresh token is valid after being issued",
                        "default": 43200
                    },
                    "auth_flows": {
                        "type": "array",
                        "description": "The authentication flows that the client can use",
                        "default": ["ALLOW_CUSTOM_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"],
                        "items": {
                            "type": "string",
                            "enum": ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_CUSTOM_AUTH", "ALLOW_USER_PASSWORD_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]
                        }
                    },
                    "oauth_flows": {
                        "type": "array",
                        "description": "The OAuth flows that the client can use",
                        "default": ["client_credentials"]
                    },
                    "oauth_scopes": {
                        "type": "array",
                        "description": "The OAuth scopes that the client can use. Some examples are 'phone', 'email', 'openid', 'profile', 'aws.cognito.signin.user.admin'"
                    },
                    "token_revocation": {
                        "type": "boolean",
                        "description": "If true, the client can revoke its own tokens. Setting this to true increases token size",
                        "default": false
                    },
                    "read_attributes": {
                        "type": "array",
                        "description": "The attributes that the client can read from the user pool"
                    },
                    "write_attributes": {
                        "type": "array",
                        "description": "The attributes that the client can write to the user pool"
                    },
                    "supported_identity_providers": {
                        "type": "array",
                        "description": "The identity providers that the client can use. Ex: ['Facebook', 'Google', 'COGNITO']",
                        "default": ["COGNITO"]
                    },
                    "callback_urls": {
                        "type": "array",
                        "description": "Only use if you are using custom identity providers. The URLs that the client can redirect to after authentication."
                    },
                    "logout_urls": {
                        "type": "array",
                        "description": "Only use if you are using custom identity providers. The URLs that the client can redirect to after logout."
                    },
                    "default_redirect_uri": {
                        "type": "string",
                        "description": "Only use if you are using custom identity providers. The default callback_url"
                    },
                    "prevent_user_existence_errors": {
                        "type": "string",
                        "description": "Pass LEGACY if you want an exception thrown if the user does not exist. Otherwise the user not existing is treated the same as any other incorrect login",
                        "default": "ENABLED",
                        "enum": ["ENABLED", "LEGACY"]
                    }
                }
            }
        }
    },
    "repos": {
        "route53": "https://github.com/cloudkommand/route53"
    }
}